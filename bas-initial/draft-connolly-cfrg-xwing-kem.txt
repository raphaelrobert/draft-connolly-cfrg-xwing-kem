



Crypto Forum                                                 D. Connolly
Internet-Draft                                                 SandboxAQ
Intended status: Informational                                P. Schwabe
Expires: 11 May 2024                         MPI-SP & Radboud University
                                                        B. E. Westerbaan
                                                              Cloudflare
                                                         8 November 2023


            X-Wing: general-purpose hybrid post-quantum KEM
                  draft-connolly-cfrg-xwing-kem-latest

Abstract

   This memo defines X-Wing, a general-purpose post-quantum/traditional
   hybrid key encapsulation mechanism (PQ/T KEM) built on X25519 and ML-
   KEM-768.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://dconnolly.github.io/draft-connolly-cfrg-xwing-kem/draft-
   connolly-cfrg-xwing-kem.html.  Status information for this document
   may be found at https://datatracker.ietf.org/doc/draft-connolly-cfrg-
   xwing-kem/.

   Discussion of this document takes place on the Crypto Forum Research
   Group mailing list (mailto:cfrg@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/search/?email_list=cfrg.  Subscribe
   at https://www.ietf.org/mailman/listinfo/cfrg/.

   Source for this draft and an issue tracker can be found at
   https://github.com/dconnolly/draft-connolly-cfrg-xwing-kem.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 11 May 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Table of Contents

   1.  Introduction
     1.1.  Warning: ML-KEM-768 has not been standardised
     1.2.  Motivation
     1.3.  Design goals
     1.4.  Not an interactive key-agreement
     1.5.  Not an authenticated KEM
     1.6.  Comparisons
   2.  Requirements Notation
   3.  Conventions and Definitions
   4.  Cryptographic Dependencies
   5.  X-Wing Construction
     5.1.  Key derivation
     5.2.  Encapsulation
     5.3.  Decapsulation
       5.3.1.  Validation of Inputs and Outputs
     5.4.  Use in HPKE
   6.  Security Considerations
   7.  IANA Considerations
   8.  References
     8.1.  Normative References
     8.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

1.1.  Warning: ML-KEM-768 has not been standardised

   X-Wing uses ML-KEM-768, which has not been standardised yet.  Thus
   X-Wing is not finished, yet, and should not be used, yet.

1.2.  Motivation

   There are many choices that can be made when specifying a hybrid KEM:
   the constituent KEMs; their security levels; the combinber; and the
   hash within, to name but a few.  Having too many similar options are
   a burden to the ecosystem.

   The aim of X-Wing is to provide a concrete, simple choice for post-
   quantum hybrid KEM, that should be suitable for the vast majority of
   use cases.

1.3.  Design goals

   By making concrete choices, we can simplify and improve many aspects
   of X-Wing as compared to a more generic combiner.

   *  Simplicity of definition.  Because all shared secrets and cipher
      texts are fixed length, we do not need to encode the length.
      Using SHA3-256, we do not need HMAC-based construction.

   *  Security analysis: because ML-KEM-768 already assumes QROM, we do
      not need to complicate the analysis of X-Wing by considering
      weaker models.

   *  Performance: by using SHA3-256 in the combiner, which matches the
      hashing in ML-KEM, this hash can be computed in one go on
      platforms where two-way Keccak is available.

   We aim for "128 bits" security (NIST PQC level 1).  Although at the
   moment there is no peer-reviewed evidence that ML-KEM-512 does not
   reach this level, we would like to hedge against future cryptanalytic
   improvements, and feel ML-KEM-768 provides a comfortable margin.

   We aim for X-Wing to be usable for most applications, including
   specifically HPKE [RFC9180].

1.4.  Not an interactive key-agreement

   Traditionally most protocols use a Diffie-Hellman (DH) style non-
   interactive key-agreement.  In many cases, a DH key agreement can be
   replaced by the interactive key-agreement afforded by a KEM without
   change in the protocol flow.  One notable example is TLS [HYBRID]
   [XYBERTLS].  However, not all uses of DH can be replaced in a
   straight-forward manner by a plain KEM.

1.5.  Not an authenticated KEM

   In particular, X-Wing is not, borrowing the language of [RFC9180], an
   _authenticated_ KEM.

1.6.  Comparisons

   X-Wing is most similar to HPKE's X25519Kyber768Draft00 [XYBERHPKE].
   The key differences are:

   *  X-Wing uses the final version of ML-KEM-768.

   *  X-Wing hashes the shared secrets, to be usable outside of HPKE.

   *  X-Wing has a simpler combiner by flattening DHKEM(X25519) into the
      final hash.

   There is also a different KEM called X25519Kyber768Draft00 [XYBERTLS]
   which is used in TLS.  This one should not be used outside of TLS, as
   it assumes the presence of the TLS transcript to ensure non
   malleability.

   TODO comparison with [I-D.ounsworth-cfrg-kem-combiners]

2.  Requirements Notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Conventions and Definitions

   This document is consistent with all terminology defined in
   [I-D.driscoll-pqt-hybrid-terminology].

   The following terms are used throughout this document to describe the
   operations, roles, and behaviors of HPKE:

   *  concat(x0, ..., xN): returns the concatenation of byte strings.
      concat(0x01, 0x0203, 0x040506) = 0x010203040506.

   *  random(n): return a pseudorandom byte string of length n bytes
      produced by a cryptographically-secure random number generator.

4.  Cryptographic Dependencies

   X-Wing relies on the following primitives:

   TODO: update the below to be ML-KEM 768 specific

   *  ML-KEM 768 post-quantum key-encapsulation mechanism (KEM):

      -  ML-KEM-768.GenerateKeyPair(): Randomized algorithm to generate
         a key pair (skX, pkX).

      -  ML-KEM-768.DeriveKeyPair(ikm): Deterministic algorithm to
         derive a key pair (skX, pkX) from the byte string ikm, where
         ikm SHOULD have at least Nsk bytes of entropy (see Section 5.1
         for discussion).

      -  ML-KEM-768.SerializePublicKey(pkX): Produce a byte string of
         length Npk encoding the public key pkX.

      -  ML-KEM-768.DeserializePublicKey(pkXm): Parse a byte string of
         length Npk to recover a public key.  This function can raise a
         DeserializeError error upon pkXm deserialization failure.

      -  ML-KEM-768.Encap(pkR): Randomized algorithm to generate an
         ephemeral, fixed-length symmetric key (the KEM shared secret)
         and a fixed-length encapsulation of that key that can be
         decapsulated by the holder of the private key corresponding to
         pkR.  This function can raise an EncapError on encapsulation
         failure.

      -  ML-KEM-768.Decap(enc, skR): Deterministic algorithm using the
         private key skR to recover the ephemeral symmetric key (the KEM
         shared secret) from its encapsulated representation enc.  This
         function can raise a DecapError on decapsulation failure.

      -  ML-KEM-768.AuthEncap(pkR, skS) (optional): Same as Encap(), and
         the outputs encode an assurance that the KEM shared secret was
         generated by the holder of the private key skS.

      -  ML-KEM-768.AuthDecap(enc, skR, pkS) (optional): Same as
         Decap(), and the recipient is assured that the KEM shared
         secret was generated by the holder of the private key skS.

      -  ML-KEM-768.Nsecret: The length in bytes of a KEM shared secret
         produced by this KEM.

      -  ML-KEM-768.Nenc: The length in bytes of an encapsulated key
         produced by this KEM.

      -  ML-KEM-768.Npk: The length in bytes of an encoded public key
         for this KEM.

      -  ML-KEM-768.Nsk: The length in bytes of an encoded private key
         for this KEM.

   *  X25519 elliptic curve Diffie-Hellman key-exchange defined in
      Section 5 of [RFC7748]:

      -  X25519.GenerateKeyPair(): Randomized algorithm to generate an
         X25519 key pair (skX, pkX)

      -  X25519.DeriveKeyPair(ikm): Deterministic algorithm to derive a
         key pair (skX, pkX) from the byte string ikm, where ikm SHOULD
         have at least Nsk bytes of entropy (see Section 5.1 for
         discussion).

      -  X25519.SerializePublicKey(pkX): Produce a byte string of length
         Npk encoding the public key pkX.

      -  X25519.DeserializePublicKey(pkXm): Parse a byte string of
         length Npk to recover a public key.  This function can raise a
         DeserializeError error upon pkXm deserialization failure.
         TODO: lock this down to be DH based on the base point, not just
         generic X25519 function

      -  X25519.DH(skX, pkY): Perform a non-interactive Diffie-Hellman
         exchange over the Montgomery form of the elliptic curve
         curve25519 using the private key skX and public key pkY to
         produce a Diffie-Hellman shared secret of length Ndh as defined
         in Section 5 of [RFC7748].  This function can raise a
         ValidationError as described in Section 5.3.1.

      -  X25519.Ndh: The length in bytes of a Diffie-Hellman shared
         secret produced by X25519(), which is 32.

      -  X25519.Nsk: The length in bytes of a Diffie-Hellman private
         key, which is 32.

   *  Hash functions:

      -  SHAKE128(bytes):

      -  SHA3-256(bytes):

5.  X-Wing Construction

5.1.  Key derivation

   An X-Wing keypair (private key, public key) is derived from entropy
   as follows.

   def DeriveKeyPair(ikm):
     seed = SHAKE128(ikm, 96)
     seed1 = seed[0:32]
     seed2 = seed[32:96]
     (sk1, pk1) = X25519.DeriveKeyPair(seed1)
     (sk2, pk2) = ML-KEM-768.DeriveKeyPair(seed2)
     return concat(seed1, sk2), concat(pk1, pk2)

   def GenerateKeyPair():
     return DeriveKeyPair(random(32))


   TODO: Define SERIALIZE_PUBLIC_KEY

   TODO: Define DESERIALIZE_PUBLIC_KEY

   TODO: discuss serializing/deserializing private keys

   Here X25519() is the function defined in Section 6.1 of [RFC7748].

   ML-KEM-768.DeriveKeyPair() is the function defined in TODO.

   ikm SHOULD be at least 32 bytes in length.

5.2.  Encapsulation

   Given an X-Wing public key pk, encapsulation proceeds as follows.

   XWingDS is the following 48 byte ASCII string

   XWingDS = concat(
       "======>     ",
       " \ \        ",
       " / ||||||||)",
       "======>     "
   )

   [ TODO prettier ASCII art ]

   def Combiner(ss1, ss2, ct1, ct2, pk1):
     return SHA3-256(concat(
       XWingDS,
       ss1,
       ss2,
       ct1,
       ct2,
       pk1
     ))

   def Encapsulate(pk):
     pk1 = pk[0:32]
     pk2 = pk[32:TODO]
     (esk1, ct1) = X25519.GenerateKeyPair()
     ss1 = X25519.DH(esk1, pk1)
     (ss2, ct2) = ML-KEM-768.Encapsulate(pk2)
     ss = Combiner(ss1, ss2, ct1, ct2, pk1)
     ct = concat(ct1, ct2)
     return (ss, ct)

   TODO: Define SERIALIZE

   Here ML-KEM-768.Encapsulate() is the function defined in TODO.

5.3.  Decapsulation

   TODO: define DESERIALIZE()

   def Decapsulate(ct, sk, pk):
     ct1 = ct[0:32]
     ct2 = ct[32:TODO]
     sk1 = sk[0:32]
     sk2 = sk[32:TODO]
     pk1 = pk[0:32]
     ss1 = X25519.DH(sk1, ct1)
     ss2 = ML-KEM-768.Decapsulate(ct2, sk2)
     return Combiner(ss1, ss2, ct1, ct2, pk1)

5.3.1.  Validation of Inputs and Outputs

   The following public keys are subject to validation if the group
   requires public key validation: the sender MUST validate the
   recipient's public key pkR; the recipient MUST validate the ephemeral
   public key pkE; in authenticated modes, the recipient MUST validate
   the sender's static public key pkS.  Validation failure yields a
   ValidationError.

   For X25519, public keys and Diffie-Hellman outputs MUST be validated
   as described in [RFC7748].  In particular, recipients MUST check
   whether the Diffie-Hellman shared secret is the all-zero value and
   abort if so.

   TODO: fill out ML-KEM-768 public key validation

   ###

5.4.  Use in HPKE

   TODO.

6.  Security Considerations

   TODO Security

7.  IANA Considerations

   TODO

8.  References

8.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

8.2.  Informative References

   [H2CURVE]  Faz-Hernandez, A., Scott, S., Sullivan, N., Wahby, R. S.,
              and C. A. Wood, "Hashing to Elliptic Curves", Work in
              Progress, Internet-Draft, draft-irtf-cfrg-hash-to-curve-
              16, 15 June 2022, <https://datatracker.ietf.org/doc/html/
              draft-irtf-cfrg-hash-to-curve-16>.

   [HASHEDDH] Julien Duman, Dominik Hartmann, Eike Kiltz, Sabrina
              Kunzweiler, Jonas Lehmann, and Doreen Riepel, "Group
              Action Key Encapsulation and Non-Interactive Key Exchange
              in the QROM", n.d.,
              <https://eprint.iacr.org/2022/1230.pdf>.

   [HYBRID]   Stebila, D., Fluhrer, S., and S. Gueron, "Hybrid key
              exchange in TLS 1.3", Work in Progress, Internet-Draft,
              draft-stebila-tls-hybrid-design-03, 12 February 2020,
              <https://datatracker.ietf.org/doc/html/draft-stebila-tls-
              hybrid-design-03>.

   [I-D.driscoll-pqt-hybrid-terminology]
              D, F., "Terminology for Post-Quantum Traditional Hybrid
              Schemes", Work in Progress, Internet-Draft, draft-
              driscoll-pqt-hybrid-terminology-02, 7 March 2023,
              <https://datatracker.ietf.org/doc/html/draft-driscoll-pqt-
              hybrid-terminology-02>.

   [I-D.ietf-tls-hybrid-design]
              Stebila, D., Fluhrer, S., and S. Gueron, "Hybrid key
              exchange in TLS 1.3", Work in Progress, Internet-Draft,
              draft-ietf-tls-hybrid-design-09, 7 September 2023,
              <https://datatracker.ietf.org/doc/html/draft-ietf-tls-
              hybrid-design-09>.

   [I-D.ounsworth-cfrg-kem-combiners]
              Ounsworth, M., Wussler, A., and S. Kousidis, "Combiner
              function for hybrid key encapsulation mechanisms (Hybrid
              KEMs)", Work in Progress, Internet-Draft, draft-ounsworth-
              cfrg-kem-combiners-04, 8 July 2023,
              <https://datatracker.ietf.org/doc/html/draft-ounsworth-
              cfrg-kem-combiners-04>.

   [KYBERV302]
              Avanzi, R., Bos, J., Ducas, L., Kiltz, E., Lepoint, T.,
              Lyubashevsky, V., Schanck, J., Schwabe, P., Seiler, G.,
              and D. Stehle, "CRYSTALS-Kyber, Algorithm Specification
              And Supporting Documentation (version 3.02)", 2021,
              <https://pq-crystals.org/kyber/data/kyber-specification-
              round3-20210804.pdf>.

   [MLKEM]    National Institute of Standards and Technology, "FIPS 203
              (Initial Draft): Module-Lattice-Based Key-Encapsulation
              Mechanism Standard", n.d.,
              <https://csrc.nist.gov/pubs/fips/203/ipd>.

   [NISTR3]   The NIST PQC Team, "PQC Standardization Process:
              Announcing Four Candidates to be Standardized, Plus Fourth
              Round Candidates", n.d., <https://csrc.nist.gov/News/2022/
              pqc-candidates-to-be-standardized-and-round-4>.

   [RFC7748]  Langley, A., Hamburg, M., and S. Turner, "Elliptic Curves
              for Security", RFC 7748, DOI 10.17487/RFC7748, January
              2016, <https://www.rfc-editor.org/rfc/rfc7748>.

   [RFC9180]  Barnes, R., Bhargavan, K., Lipp, B., and C. Wood, "Hybrid
              Public Key Encryption", RFC 9180, DOI 10.17487/RFC9180,
              February 2022, <https://www.rfc-editor.org/rfc/rfc9180>.

   [SECEST]   Ducas, L. and J. Schanck, "CRYSTALS security estimate
              scripts", n.d.,
              <https://github.com/pq-crystals/security-estimates>.

   [XYBERHPKE]
              Westerbaan, B. and C. A. Wood, "X25519Kyber768Draft00
              hybrid post-quantum KEM for HPKE", Work in Progress,
              Internet-Draft, draft-westerbaan-cfrg-hpke-xyber768d00-02,
              4 May 2023, <https://datatracker.ietf.org/doc/html/draft-
              westerbaan-cfrg-hpke-xyber768d00-02>.

   [XYBERTLS] Westerbaan, B. and D. Stebila, "X25519Kyber768Draft00
              hybrid post-quantum key agreement", Work in Progress,
              Internet-Draft, draft-tls-westerbaan-xyber768d00-03, 24
              September 2023, <https://datatracker.ietf.org/doc/html/
              draft-tls-westerbaan-xyber768d00-03>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Deirdre Connolly
   SandboxAQ
   Email: durumcrustulum@gmail.com


   Peter Schwabe
   MPI-SP & Radboud University
   Email: peter@cryptojedi.org


   Bas Westerbaan
   Cloudflare
   Email: bas@cloudflare.com
